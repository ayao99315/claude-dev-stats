/**
 * 双语报告模板系统
 * 提供中英文双语报告模板，支持多种输出格式
 */

import { 
  ReportTemplate, 
  ReportConfig, 
  ReportFormat, 
  ReportType, 
  Language, 
  BilingualText,
  RenderContext,
  TableConfig,
  ChartConfig,
  MetricCard,
  InsightCard
} from '../types/reports';
import { 
  AnalysisResult, 
  BasicStats, 
  EfficiencyMetrics, 
  SmartInsights,
  TrendAnalysis,
  CostAnalysis,
  ToolUsageAnalysis
} from '../types/analytics';

/**
 * 双语文本管理器
 * 统一管理所有界面文本的中英文翻译
 */
export class BilingualTextManager {
  private texts: Record<string, BilingualText> = {
    // 报告标题
    'report.title.daily': {
      'zh-CN': '📊 Claude Code 日报',
      'en-US': '📊 Claude Code Daily Report'
    },
    'report.title.efficiency': {
      'zh-CN': '⚡ 效率分析报告',
      'en-US': '⚡ Efficiency Analysis Report'
    },
    'report.title.trends': {
      'zh-CN': '📈 趋势分析报告',
      'en-US': '📈 Trend Analysis Report'
    },
    'report.title.insights': {
      'zh-CN': '🔍 智能洞察报告',
      'en-US': '🔍 Smart Insights Report'
    },
    'report.title.cost': {
      'zh-CN': '💰 成本分析报告',
      'en-US': '💰 Cost Analysis Report'
    },

    // 表格标题
    'table.basic_stats': {
      'zh-CN': '📋 基础统计',
      'en-US': '📋 Basic Statistics'
    },
    'table.efficiency': {
      'zh-CN': '⚡ 效率指标',
      'en-US': '⚡ Efficiency Metrics'
    },
    'table.tool_usage': {
      'zh-CN': '🔧 工具使用',
      'en-US': '🔧 Tool Usage'
    },

    // 列标题
    'column.metric': {
      'zh-CN': '指标',
      'en-US': 'Metric'
    },
    'column.value': {
      'zh-CN': '数值',
      'en-US': 'Value'
    },
    'column.tool': {
      'zh-CN': '工具',
      'en-US': 'Tool'
    },
    'column.usage': {
      'zh-CN': '使用次数',
      'en-US': 'Usage Count'
    },
    'column.efficiency': {
      'zh-CN': '效率评分',
      'en-US': 'Efficiency Score'
    },

    // 指标名称
    'metric.total_time': {
      'zh-CN': '总工作时间',
      'en-US': 'Total Time'
    },
    'metric.total_tokens': {
      'zh-CN': '总Token消耗',
      'en-US': 'Total Tokens'
    },
    'metric.total_cost': {
      'zh-CN': '总成本',
      'en-US': 'Total Cost'
    },
    'metric.files_modified': {
      'zh-CN': '修改文件数',
      'en-US': 'Files Modified'
    },
    'metric.productivity_score': {
      'zh-CN': '生产力评分',
      'en-US': 'Productivity Score'
    },
    'metric.tokens_per_hour': {
      'zh-CN': 'Token/小时',
      'en-US': 'Tokens/Hour'
    },
    'metric.lines_per_hour': {
      'zh-CN': '代码行数/小时',
      'en-US': 'Lines/Hour'
    },

    // 效率评级
    'rating.excellent': {
      'zh-CN': '卓越',
      'en-US': 'Excellent'
    },
    'rating.good': {
      'zh-CN': '良好',
      'en-US': 'Good'
    },
    'rating.average': {
      'zh-CN': '一般',
      'en-US': 'Average'
    },
    'rating.poor': {
      'zh-CN': '较差',
      'en-US': 'Poor'
    },

    // 趋势描述
    'trend.increasing': {
      'zh-CN': '上升',
      'en-US': 'Increasing'
    },
    'trend.decreasing': {
      'zh-CN': '下降',
      'en-US': 'Decreasing'
    },
    'trend.stable': {
      'zh-CN': '稳定',
      'en-US': 'Stable'
    },

    // 报告节
    'section.summary': {
      'zh-CN': '📊 概览',
      'en-US': '📊 Summary'
    },
    'section.detailed_stats': {
      'zh-CN': '📈 详细统计',
      'en-US': '📈 Detailed Statistics'
    },
    'section.insights': {
      'zh-CN': '💡 智能洞察',
      'en-US': '💡 Smart Insights'
    },
    'section.recommendations': {
      'zh-CN': '🎯 改进建议',
      'en-US': '🎯 Recommendations'
    },

    // 时间单位
    'time.hours': {
      'zh-CN': '小时',
      'en-US': 'hours'
    },
    'time.minutes': {
      'zh-CN': '分钟',
      'en-US': 'minutes'
    },

    // 数据质量
    'quality.excellent': {
      'zh-CN': '优秀',
      'en-US': 'Excellent'
    },
    'quality.good': {
      'zh-CN': '良好',
      'en-US': 'Good'
    },
    'quality.fair': {
      'zh-CN': '一般',
      'en-US': 'Fair'
    },
    'quality.poor': {
      'zh-CN': '较差',
      'en-US': 'Poor'
    },

    // 报告尾部
    'footer.generated_by': {
      'zh-CN': '由 Claude Code Stats 生成',
      'en-US': 'Generated by Claude Code Stats'
    },
    'footer.version': {
      'zh-CN': '版本',
      'en-US': 'Version'
    }
  };

  /**
   * 获取翻译文本
   * @param key 文本键名
   * @param language 语言
   * @returns 翻译后的文本
   */
  getText(key: string, language: Language): string {
    const text = this.texts[key];
    if (!text) {
      return key; // 如果找不到翻译，返回键名
    }
    return text[language] || text['zh-CN'] || key;
  }

  /**
   * 添加新的翻译文本
   * @param key 文本键名
   * @param texts 中英文文本对
   */
  addText(key: string, texts: BilingualText): void {
    this.texts[key] = texts;
  }
}

/**
 * 报告格式化工具
 * 提供各种数据格式化方法
 */
export class ReportFormatter {
  private textManager: BilingualTextManager;

  constructor(textManager: BilingualTextManager) {
    this.textManager = textManager;
  }

  /**
   * 格式化数值
   * @param num 数值
   * @param precision 精度
   * @returns 格式化后的数值字符串
   */
  formatNumber(num: number, precision: number = 2): string {
    if (num >= 1000000) {
      return `${(num / 1000000).toFixed(1)}M`;
    } else if (num >= 1000) {
      return `${(num / 1000).toFixed(1)}K`;
    }
    return num.toFixed(precision);
  }

  /**
   * 格式化百分比
   * @param num 百分比数值 (0-1)
   * @returns 格式化后的百分比字符串
   */
  formatPercent(num: number): string {
    return `${(num * 100).toFixed(1)}%`;
  }

  /**
   * 格式化时间（小时）
   * @param hours 小时数
   * @param language 语言
   * @returns 格式化后的时间字符串
   */
  formatTime(hours: number, language: Language): string {
    const hoursText = this.textManager.getText('time.hours', language);
    const minutesText = this.textManager.getText('time.minutes', language);
    
    if (hours >= 1) {
      return `${hours.toFixed(1)} ${hoursText}`;
    } else {
      const minutes = Math.round(hours * 60);
      return `${minutes} ${minutesText}`;
    }
  }

  /**
   * 格式化成本
   * @param cost 成本数值
   * @returns 格式化后的成本字符串
   */
  formatCost(cost: number): string {
    return `$${cost.toFixed(4)}`;
  }

  /**
   * 格式化效率评级
   * @param rating 评级
   * @param language 语言
   * @returns 本地化后的评级文本
   */
  formatRating(rating: string, language: Language): string {
    const ratingKey = `rating.${rating.toLowerCase()}`;
    return this.textManager.getText(ratingKey, language);
  }

  /**
   * 格式化趋势
   * @param trend 趋势方向
   * @param language 语言
   * @returns 本地化后的趋势文本
   */
  formatTrend(trend: 'up' | 'down' | 'stable', language: Language): string {
    const trendKey = `trend.${trend === 'up' ? 'increasing' : trend === 'down' ? 'decreasing' : 'stable'}`;
    return this.textManager.getText(trendKey, language);
  }
}

/**
 * 报告模板生成器
 * 生成各种格式的报告模板
 */
export class ReportTemplateGenerator {
  private textManager: BilingualTextManager;
  private formatter: ReportFormatter;

  constructor() {
    this.textManager = new BilingualTextManager();
    this.formatter = new ReportFormatter(this.textManager);
  }

  /**
   * 生成基础统计表格模板
   * @param format 输出格式
   * @param language 语言
   * @returns 表格配置
   */
  generateBasicStatsTable(format: ReportFormat, language: Language): TableConfig {
    const title = this.textManager.getText('table.basic_stats', language);
    const metricColumn = this.textManager.getText('column.metric', language);
    const valueColumn = this.textManager.getText('column.value', language);

    return {
      title,
      border: format !== 'brief',
      style: format === 'table' ? 'unicode' : format === 'brief' ? 'compact' : 'ascii',
      columns: [
        {
          key: 'metric',
          title: metricColumn,
          width: 20,
          align: 'left'
        },
        {
          key: 'value',
          title: valueColumn,
          width: 15,
          align: 'right',
          formatter: (value: any) => String(value)
        }
      ]
    };
  }

  /**
   * 生成效率指标表格模板
   * @param format 输出格式
   * @param language 语言
   * @returns 表格配置
   */
  generateEfficiencyTable(format: ReportFormat, language: Language): TableConfig {
    const title = this.textManager.getText('table.efficiency', language);
    const metricColumn = this.textManager.getText('column.metric', language);
    const valueColumn = this.textManager.getText('column.value', language);

    return {
      title,
      border: format !== 'brief',
      style: format === 'table' ? 'unicode' : format === 'brief' ? 'compact' : 'ascii',
      columns: [
        {
          key: 'metric',
          title: metricColumn,
          width: 25,
          align: 'left'
        },
        {
          key: 'value',
          title: valueColumn,
          width: 15,
          align: 'right'
        }
      ]
    };
  }

  /**
   * 生成工具使用表格模板
   * @param format 输出格式
   * @param language 语言
   * @returns 表格配置
   */
  generateToolUsageTable(format: ReportFormat, language: Language): TableConfig {
    const title = this.textManager.getText('table.tool_usage', language);
    const toolColumn = this.textManager.getText('column.tool', language);
    const usageColumn = this.textManager.getText('column.usage', language);
    const efficiencyColumn = this.textManager.getText('column.efficiency', language);

    return {
      title,
      border: format !== 'brief',
      style: format === 'table' ? 'unicode' : format === 'brief' ? 'compact' : 'ascii',
      columns: [
        {
          key: 'tool',
          title: toolColumn,
          width: 15,
          align: 'left'
        },
        {
          key: 'usage',
          title: usageColumn,
          width: 10,
          align: 'right'
        },
        {
          key: 'efficiency',
          title: efficiencyColumn,
          width: 12,
          align: 'right'
        }
      ]
    };
  }

  /**
   * 生成指标卡片
   * @param title 标题
   * @param value 数值
   * @param unit 单位
   * @param trend 趋势
   * @param icon 图标
   * @returns 指标卡片
   */
  generateMetricCard(
    title: string,
    value: string | number,
    unit?: string,
    trend?: 'up' | 'down' | 'stable',
    icon?: string
  ): MetricCard {
    return {
      title,
      value,
      unit,
      trend,
      icon
    };
  }

  /**
   * 生成洞察卡片
   * @param type 洞察类型
   * @param title 标题
   * @param content 内容
   * @param priority 优先级
   * @param action 行动建议
   * @returns 洞察卡片
   */
  generateInsightCard(
    type: 'positive' | 'negative' | 'neutral' | 'warning',
    title: string,
    content: string,
    priority: 'high' | 'medium' | 'low' = 'medium',
    action?: string
  ): InsightCard {
    return {
      type,
      title,
      content,
      priority,
      action
    };
  }

  /**
   * 创建渲染上下文
   * @param data 原始数据
   * @param config 报告配置
   * @returns 渲染上下文
   */
  createRenderContext(data: any, config: ReportConfig): RenderContext {
    const helpers = {
      formatNumber: (num: number, precision?: number) => this.formatter.formatNumber(num, precision),
      formatPercent: (num: number) => this.formatter.formatPercent(num),
      formatTime: (hours: number) => this.formatter.formatTime(hours, config.language),
      formatCost: (cost: number) => this.formatter.formatCost(cost),
      t: (key: string) => this.textManager.getText(key, config.language)
    };

    return {
      data,
      config,
      language: config.language,
      timestamp: new Date().toISOString(),
      helpers
    };
  }

  /**
   * 获取文本管理器
   */
  getTextManager(): BilingualTextManager {
    return this.textManager;
  }

  /**
   * 获取格式化工具
   */
  getFormatter(): ReportFormatter {
    return this.formatter;
  }
}

/**
 * 预定义的报告模板
 * 提供常用的报告模板配置
 */
export class ReportTemplates {
  private templateGenerator: ReportTemplateGenerator;

  constructor() {
    this.templateGenerator = new ReportTemplateGenerator();
  }

  /**
   * 日报模板
   */
  readonly dailyTemplate: ReportTemplate = {
    name: 'daily',
    type: 'daily',
    supported_formats: ['table', 'detailed', 'brief'],
    description: '生成日常使用统计报告',
    render: (data: AnalysisResult, config: ReportConfig): string => {
      return this.renderDailyReport(data, config);
    }
  };

  /**
   * 效率分析模板
   */
  readonly efficiencyTemplate: ReportTemplate = {
    name: 'efficiency',
    type: 'efficiency',
    supported_formats: ['table', 'detailed', 'brief', 'chart'],
    description: '生成效率分析报告',
    render: (data: AnalysisResult, config: ReportConfig): string => {
      return this.renderEfficiencyReport(data, config);
    }
  };

  /**
   * 趋势分析模板
   */
  readonly trendsTemplate: ReportTemplate = {
    name: 'trends',
    type: 'trends',
    supported_formats: ['detailed', 'chart'],
    description: '生成趋势分析报告',
    render: (data: AnalysisResult, config: ReportConfig): string => {
      return this.renderTrendsReport(data, config);
    }
  };

  /**
   * 洞察分析模板
   */
  readonly insightsTemplate: ReportTemplate = {
    name: 'insights',
    type: 'insights',
    supported_formats: ['detailed', 'insights'],
    description: '生成智能洞察报告',
    render: (data: AnalysisResult, config: ReportConfig): string => {
      return this.renderInsightsReport(data, config);
    }
  };

  /**
   * 成本分析模板
   */
  readonly costTemplate: ReportTemplate = {
    name: 'cost',
    type: 'cost',
    supported_formats: ['table', 'detailed', 'financial'],
    description: '生成成本分析报告',
    render: (data: AnalysisResult, config: ReportConfig): string => {
      return this.renderCostReport(data, config);
    }
  };

  /**
   * 获取所有模板
   */
  getAllTemplates(): ReportTemplate[] {
    return [
      this.dailyTemplate,
      this.efficiencyTemplate,
      this.trendsTemplate,
      this.insightsTemplate,
      this.costTemplate
    ];
  }

  /**
   * 根据类型获取模板
   * @param type 报告类型
   * @returns 对应的模板，如果不存在则返回undefined
   */
  getTemplate(type: ReportType): ReportTemplate | undefined {
    return this.getAllTemplates().find(template => template.type === type);
  }

  // ===== 私有方法：具体的报告渲染实现 =====

  /**
   * 渲染日报
   * @private
   */
  private renderDailyReport(data: AnalysisResult, config: ReportConfig): string {
    const context = this.templateGenerator.createRenderContext(data, config);
    const { helpers, language } = context;

    let report = '';

    // 报告标题
    const title = helpers.t('report.title.daily');
    report += `${title}\n`;
    report += '='.repeat(title.length) + '\n\n';

    // 基本信息
    report += `📅 时间范围: ${data.timeframe}\n`;
    report += `📂 项目: ${data.project_path}\n`;
    report += `📊 数据源: ${data.data_source}\n\n`;

    // 基础统计表格
    if (config.format !== 'brief') {
      report += this.generateBasicStatsSection(data.basic_stats, config, helpers);
    }

    // 效率指标
    if (data.efficiency) {
      report += this.generateEfficiencySection(data.efficiency, config, helpers);
    }

    // 洞察（如果有）
    if (config.include_insights && data.insights) {
      report += this.generateInsightsSection(data.insights, config, helpers);
    }

    return report;
  }

  /**
   * 渲染效率报告
   * @private
   */
  private renderEfficiencyReport(data: AnalysisResult, config: ReportConfig): string {
    const context = this.templateGenerator.createRenderContext(data, config);
    const { helpers } = context;

    let report = '';

    // 报告标题
    const title = helpers.t('report.title.efficiency');
    report += `${title}\n`;
    report += '='.repeat(title.length) + '\n\n';

    // 效率详细分析
    if (data.efficiency) {
      report += this.generateDetailedEfficiencySection(data.efficiency, config, helpers);
    }

    return report;
  }

  /**
   * 渲染趋势报告
   * @private
   */
  private renderTrendsReport(data: AnalysisResult, config: ReportConfig): string {
    const context = this.templateGenerator.createRenderContext(data, config);
    const { helpers } = context;

    let report = '';

    // 报告标题
    const title = helpers.t('report.title.trends');
    report += `${title}\n`;
    report += '='.repeat(title.length) + '\n\n';

    // 趋势分析
    if (data.trends) {
      report += this.generateTrendsSection(data.trends, config, helpers);
    }

    return report;
  }

  /**
   * 渲染洞察报告
   * @private
   */
  private renderInsightsReport(data: AnalysisResult, config: ReportConfig): string {
    const context = this.templateGenerator.createRenderContext(data, config);
    const { helpers } = context;

    let report = '';

    // 报告标题
    const title = helpers.t('report.title.insights');
    report += `${title}\n`;
    report += '='.repeat(title.length) + '\n\n';

    // 智能洞察详情
    if (data.insights) {
      report += this.generateDetailedInsightsSection(data.insights, config, helpers);
    }

    return report;
  }

  /**
   * 渲染成本报告
   * @private
   */
  private renderCostReport(data: AnalysisResult, config: ReportConfig): string {
    const context = this.templateGenerator.createRenderContext(data, config);
    const { helpers } = context;

    let report = '';

    // 报告标题
    const title = helpers.t('report.title.cost');
    report += `${title}\n`;
    report += '='.repeat(title.length) + '\n\n';

    // 成本详细分析
    report += this.generateCostSection(data.basic_stats, data.efficiency, config, helpers);

    return report;
  }

  // ===== 报告节生成方法 =====

  /**
   * 生成基础统计节
   * @private
   */
  private generateBasicStatsSection(
    stats: BasicStats, 
    config: ReportConfig, 
    helpers: RenderContext['helpers']
  ): string {
    let section = '';

    const sectionTitle = helpers.t('section.summary');
    section += `${sectionTitle}\n`;
    section += '-'.repeat(sectionTitle.length) + '\n';

    section += `⏰ ${helpers.t('metric.total_time')}: ${helpers.formatTime(stats.total_time_hours)}\n`;
    section += `🔤 ${helpers.t('metric.total_tokens')}: ${helpers.formatNumber(stats.total_tokens, 0)}\n`;
    section += `💰 ${helpers.t('metric.total_cost')}: ${helpers.formatCost(stats.total_cost_usd)}\n`;
    section += `📁 ${helpers.t('metric.files_modified')}: ${stats.files_modified}\n\n`;

    return section;
  }

  /**
   * 生成效率节
   * @private
   */
  private generateEfficiencySection(
    efficiency: EfficiencyMetrics, 
    config: ReportConfig, 
    helpers: RenderContext['helpers']
  ): string {
    let section = '';

    const sectionTitle = helpers.t('table.efficiency');
    section += `${sectionTitle}\n`;
    section += '-'.repeat(sectionTitle.length) + '\n';

    section += `📊 ${helpers.t('metric.productivity_score')}: ${efficiency.productivity_score.toFixed(1)}/10\n`;
    section += `⚡ 效率评级: ${helpers.t(`rating.${efficiency.efficiency_rating.toLowerCase()}`)}\n`;
    section += `🚀 ${helpers.t('metric.tokens_per_hour')}: ${helpers.formatNumber(efficiency.tokens_per_hour, 0)}\n`;
    section += `📝 ${helpers.t('metric.lines_per_hour')}: ${helpers.formatNumber(efficiency.lines_per_hour, 0)}\n\n`;

    return section;
  }

  /**
   * 生成详细效率节
   * @private
   */
  private generateDetailedEfficiencySection(
    efficiency: EfficiencyMetrics, 
    config: ReportConfig, 
    helpers: RenderContext['helpers']
  ): string {
    let section = this.generateEfficiencySection(efficiency, config, helpers);

    // 添加工具使用分析（如果有）
    section += '\n';

    return section;
  }

  /**
   * 生成洞察节
   * @private
   */
  private generateInsightsSection(
    insights: SmartInsights, 
    config: ReportConfig, 
    helpers: RenderContext['helpers']
  ): string {
    let section = '';

    const sectionTitle = helpers.t('section.insights');
    section += `${sectionTitle}\n`;
    section += '-'.repeat(sectionTitle.length) + '\n';

    // 显示前3个洞察
    insights.insights.slice(0, 3).forEach((insight, index) => {
      const icon = index === 0 ? '✅' : index === 1 ? '⚠️' : 'ℹ️';
      section += `${icon} ${insight}\n\n`;
    });

    return section;
  }

  /**
   * 生成详细洞察节
   * @private
   */
  private generateDetailedInsightsSection(
    insights: SmartInsights, 
    config: ReportConfig, 
    helpers: RenderContext['helpers']
  ): string {
    let section = '';

    // 显示所有洞察
    insights.insights.forEach((insight, index) => {
      const icon = index % 3 === 0 ? '✅' : index % 3 === 1 ? '⚠️' : 'ℹ️';
      section += `${icon} ${insight}\n\n`;
    });

    // 显示建议
    if (insights.recommendations && insights.recommendations.length > 0) {
      const recSection = helpers.t('section.recommendations');
      section += `${recSection}\n`;
      section += '-'.repeat(recSection.length) + '\n';

      insights.recommendations.forEach((rec, index) => {
        section += `${index + 1}. ${rec}\n`;
      });
      section += '\n';
    }

    return section;
  }

  /**
   * 生成趋势节
   * @private
   */
  private generateTrendsSection(
    trends: TrendAnalysis, 
    config: ReportConfig, 
    helpers: RenderContext['helpers']
  ): string {
    let section = '';

    const timeDirection = trends.time_trend > 0 ? '上升' : trends.time_trend < 0 ? '下降' : '稳定';
    const tokenDirection = trends.token_trend > 0 ? '上升' : trends.token_trend < 0 ? '下降' : '稳定';
    const productivityDirection = trends.productivity_trend > 0 ? '上升' : trends.productivity_trend < 0 ? '下降' : '稳定';
    
    section += `📈 时间使用趋势: ${timeDirection} (${(trends.time_trend * 100).toFixed(1)}%)\n`;
    section += `🔤 Token消耗趋势: ${tokenDirection} (${(trends.token_trend * 100).toFixed(1)}%)\n`;
    section += `⚡ 生产力趋势: ${productivityDirection} (${(trends.productivity_trend * 100).toFixed(1)}%)\n\n`;

    return section;
  }

  /**
   * 生成成本节
   * @private
   */
  private generateCostSection(
    stats: BasicStats,
    efficiency: EfficiencyMetrics | undefined,
    config: ReportConfig, 
    helpers: RenderContext['helpers']
  ): string {
    let section = '';

    section += `💰 总成本: ${helpers.formatCost(stats.total_cost_usd)}\n`;
    section += `⏰ 小时成本: ${helpers.formatCost(stats.total_cost_usd / stats.total_time_hours)}\n`;
    
    if (efficiency) {
      const costPerLine = stats.total_cost_usd / efficiency.estimated_lines_changed;
      section += `📝 每行代码成本: ${helpers.formatCost(costPerLine)}\n`;
    }
    
    section += '\n';

    return section;
  }
}

// 导出单例实例
export const reportTemplates = new ReportTemplates();
export const reportTemplateGenerator = new ReportTemplateGenerator();
export const bilingualTextManager = reportTemplateGenerator.getTextManager();